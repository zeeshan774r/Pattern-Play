{"version":3,"sources":["components/SquareBox/index.js","components/LevelCounter/index.js","components/Button/index.js","pages/main.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","styled","div","highlighted","color","SquareBox","props","onClick","Text","span","Value","LevelCounter","level","button","Button","MianWrapper","SquareBoxWrapper","ErrorText","h4","WonText","h3","colorBox","PatternPlay","playAnimate","hilightLoop","state","randomArray","arr","index","setState","highlight","setTimeout","length","requestUserInput","onClickBoxes","selectUserInput","modifiedArray","slice","userWon","count","requestInput","errorClick","len","generatePattern","randNumber","Math","floor","random","push","this","map","el","key","Component","Title","h1","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4c8261b8.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nconst Wrapper = styled.div`\n    border: 1px solid #000;\n    width: 6rem;\n    height: 6rem;\n    opacity: ${({highlighted}) => highlighted? '1':'0.5'};\n    cursor: pointer;\n    margin: 0 1rem;\n    background-color : ${({color}) => color};\n    box-shadow : ${({highlighted}) => highlighted? '0 0 20px gold':'none'};\n`\n\nfunction SquareBox(props){\n    return(\n        <Wrapper color={props.color} highlighted={props.highlighted} onClick={props.onClick} />\n    )\n}\n\nexport default SquareBox","import React from 'react'\nimport styled from 'styled-components'\n\nconst Wrapper = styled.div`\n   display: block;\n`\nconst Text = styled.span`\n    color: #000;\n    font-size: 1.5rem;\n`\nconst Value = styled.span`\n    color: #000;\n    opacity: 0.7;\n    font-size: 1.5rem;\n`\n\nfunction LevelCounter(props){\n    return(\n        <Wrapper>\n            <Text>Level: </Text>\n            <Value>{props.level}</Value>\n        </Wrapper>\n    )\n}\n\nexport default LevelCounter","import React from 'react'\nimport styled from 'styled-components'\n\nconst Wrapper = styled.button`\n   padding: 0.25rem 2.5rem;\n   cursor: pointer;\n`\nconst Text = styled.span`\n    color: #000;\n    font-size: 1rem;\n`\n\nfunction Button(props){\n    return(\n        <Wrapper onClick={props.onClick}>\n            <Text>Play</Text>\n        </Wrapper>\n    )\n}\n\nexport default Button","import React, {Component} from 'react'\nimport styled from 'styled-components'\nimport SquareBox from '../components/SquareBox'\nimport LevelCounter from '../components/LevelCounter'\nimport Button from '../components/Button'\n\nconst MianWrapper = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n    height: 35rem;\n`\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n    border: 1px solid #eaeaea;\n    height: 20rem;\n    width: 35rem;\n`\nconst SquareBoxWrapper = styled.div`\n    display: flex;\n`\nconst ErrorText = styled.h4`\n    color: red;\n`\nconst WonText = styled.h3`\n    color: green;\n`\nconst colorBox = ['red', 'blue', 'green', 'yellow']\n\nclass PatternPlay extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            level: 1,\n            randomArray: [],\n            count: 1,\n            highlight: null,\n            errorClick: false,\n            userWon: false,\n            requestInput:false\n        }\n    }\n    playAnimate=()=>{\n        this.hilightLoop(this.state.randomArray, 0);\n    }\n\n    hilightLoop=(arr, index)=>{\n        this.setState({\n            highlight: arr[index]\n        }, ()=>{\n            setTimeout(()=>{if(arr.length<=index+1){\n                this.setState({\n                    highlight: null,\n                })\n                setTimeout(()=>this.requestUserInput(arr.length), 5000)\n            }\n            else{\n                this.hilightLoop(arr, index+1)\n            }}, 500)\n        })\n    }\n\n    onClickBoxes=(index)=>{\n       if(this.state.randomArray.length !== 0 ){\n        this.selectUserInput(index)\n       }\n    }\n\n    selectUserInput=(index)=>{\n        if(index === this.state.randomArray[0]){\n            let modifiedArray = [...this.state.randomArray].slice(1)\n            this.setState({randomArray: modifiedArray}, ()=>{\n                if(this.state.level === 10 && this.state.randomArray.length ===0){\n                    this.setState({\n                        userWon: true, level: 1, randomArray: [], count: 1,requestInput: false\n                        \n                    })\n                }\n                else if(this.state.randomArray.length===0){\n                    this.setState({count: this.state.count+1, level: this.state.level+1,requestInput: false})\n                }\n            })\n        }\n        else{\n            this.setState({\n                count: 1, level : 1, randomArray: [], highlight: null, errorClick: true,requestInput: false\n            })\n        }\n    }\n\n    requestUserInput=(len)=>{\n        if(len == this.state.randomArray.length){\n            this.setState({requestInput: true}) \n        }\n    }\n    generatePattern = () => {\n        const {count}=this.state\n        let arr =[]\n        while(arr.length<count && arr.length <=10){\n            let randNumber = Math.floor(Math.random() * 4);\n            if(arr.length && randNumber===arr[arr.length-1]){\n                arr = []\n            }\n            else{\n                arr.push(randNumber);\n            }\n        }\n        this.setState({randomArray: arr,errorClick: false, userWon: false}, this.playAnimate) \n        \n    }\n\n    render(){\n        let {level, errorClick, userWon, requestInput, randomArray} = this.state\n        return(\n            <MianWrapper>\n                {requestInput? <ErrorText>Please select the boxes</ErrorText> : null }\n                { errorClick ? <ErrorText>You have clicked the wrong pattern</ErrorText> : null }\n                { userWon ? <WonText>You have won</WonText> : null }\n                {level > 1 ? <WonText>{`You have successfully completed level ${level-1}`}</WonText> : null}\n                <Wrapper>\n                <LevelCounter level={level}></LevelCounter>\n                <SquareBoxWrapper>\n                {colorBox.map((el, index) => (\n                    <SquareBox key={index} highlighted={this.state.highlight===index} color={el} onClick={()=>this.onClickBoxes(index)}></SquareBox>\n                ))}\n                </SquareBoxWrapper>\n                {randomArray.length>0 && <div>Please Select {randomArray.length} boxes</div>}\n                <Button onClick={this.generatePattern}>play</Button>\n            </Wrapper>\n            </MianWrapper>\n        )\n    }\n}\n\nexport default PatternPlay","import React from 'react'\nimport PatternPlay from '../src/pages/main'\nimport styled from 'styled-components'\n\nconst Title = styled.h1`\n  color: #000;\n  text-align: center;\n`\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Title>Pattern Repeating Game</Title>\n      <PatternPlay></PatternPlay>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}